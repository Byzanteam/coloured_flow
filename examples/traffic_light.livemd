<!-- livebook:{"app_settings":{"access_type":"public","output_type":"rich","show_source":true,"slug":"traffic-light"}} -->

# Traffic Light

```elixir
Mix.install(
  [
    {:coloured_flow, github: "Byzanteam/coloured_flow"},
    {:kino, "~> 0.14.1"},
    {:kino_excalidraw, "~> 0.5.0"}
  ],
  config: [
    coloured_flow: [
      {
        ColouredFlow.Runner.Storage,
        [
          storage: ColouredFlow.Runner.Storage.InMemory
        ]
      }
    ]
  ]
)
```

## Coloured Petri Net

<!-- livebook:{"attrs":"eyJkYXRhIjoie1xuICBcInR5cGVcIjogXCJleGNhbGlkcmF3XCIsXG4gIFwidmVyc2lvblwiOiAyLFxuICBcInNvdXJjZVwiOiBcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MVwiLFxuICBcImVsZW1lbnRzXCI6IFtcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJsaW5lXCIsXG4gICAgICBcInZlcnNpb25cIjogMzQ0LFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogNDE1MTM4NDMyLFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwicFQ3YlZVbVhSemVNN0dMbUlydVBzXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDIsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiAwLFxuICAgICAgXCJ4XCI6IDI1OS41OTAyMDIwMTEzNTI2MyxcbiAgICAgIFwieVwiOiAzNDkuMzMzNjQ2NDU3OTIxMSxcbiAgICAgIFwic3Ryb2tlQ29sb3JcIjogXCIjMWUxZTFlXCIsXG4gICAgICBcImJhY2tncm91bmRDb2xvclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICBcIndpZHRoXCI6IDEzMyxcbiAgICAgIFwiaGVpZ2h0XCI6IDAsXG4gICAgICBcInNlZWRcIjogMTI3NzI4NDk5MixcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcImZ3M3NKYVdLRXpUNHUxTTgzdEhaTFwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlLFxuICAgICAgXCJzdGFydEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwiZW5kQmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJsYXN0Q29tbWl0dGVkUG9pbnRcIjogbnVsbCxcbiAgICAgIFwic3RhcnRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwiZW5kQXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIDEzMyxcbiAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImxpbmVcIixcbiAgICAgIFwidmVyc2lvblwiOiA0NzQsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiA4NTIxMTIwMDAsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJvSVpUT0JSQjJfdFV0akFndEZOdkhcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMixcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDEuNTcwNzk2MzI2Nzk0ODk1NyxcbiAgICAgIFwieFwiOiAzMjguNjQ2NjYzMzkwNDUyOSxcbiAgICAgIFwieVwiOiA0MTguNjU2ODA3MjIzNzgxOSxcbiAgICAgIFwic3Ryb2tlQ29sb3JcIjogXCIjMWUxZTFlXCIsXG4gICAgICBcImJhY2tncm91bmRDb2xvclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICBcIndpZHRoXCI6IDEzMyxcbiAgICAgIFwiaGVpZ2h0XCI6IDAsXG4gICAgICBcInNlZWRcIjogMTAyNzgzNDQ5NixcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcImZ3M3NKYVdLRXpUNHUxTTgzdEhaTFwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlLFxuICAgICAgXCJzdGFydEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwiZW5kQmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJsYXN0Q29tbWl0dGVkUG9pbnRcIjogbnVsbCxcbiAgICAgIFwic3RhcnRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwiZW5kQXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIDEzMyxcbiAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImxpbmVcIixcbiAgICAgIFwidmVyc2lvblwiOiAzOTEsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiAxODc2OTQzNDg4LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiVU4wQkczUTVTaXZRYm1mUTE1bW91XCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDIsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiA0LjcxMjM4ODk4MDM4NDY5LFxuICAgICAgXCJ4XCI6IDQyNS45MzM5ODMyNjA5Nzk0LFxuICAgICAgXCJ5XCI6IDQxNy45NTgyMDE2ODc4MjcxLFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgIFwid2lkdGhcIjogMTMzLFxuICAgICAgXCJoZWlnaHRcIjogMCxcbiAgICAgIFwic2VlZFwiOiAyMTI1NDEwOTQ0LFxuICAgICAgXCJncm91cElkc1wiOiBbXG4gICAgICAgIFwiTk5UTmUwLVZOUFZVb01mcWIxQkdXXCJcbiAgICAgIF0sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgMTMzLFxuICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwibGluZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDUxNixcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDE1ODk2MTMxODQsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJmV0M2R3JRS1dNNGFTcU01RmQwNC1cIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMixcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDYuMjgzMTg1MzA3MTc5NTg2LFxuICAgICAgXCJ4XCI6IDQ5NS44ODc1NTgwMjM3NzI3LFxuICAgICAgXCJ5XCI6IDM0OS43NjY1NzM4NzI4MzA2LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgIFwid2lkdGhcIjogMTMzLFxuICAgICAgXCJoZWlnaHRcIjogMCxcbiAgICAgIFwic2VlZFwiOiAxOTk4OTA1OTg0LFxuICAgICAgXCJncm91cElkc1wiOiBbXG4gICAgICAgIFwiTk5UTmUwLVZOUFZVb01mcWIxQkdXXCJcbiAgICAgIF0sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgMTMzLFxuICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwibGluZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDM3NixcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDkwODY3MzY2NCxcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcIjF3cVVnT2VJVlM0YzhxcjF3dFQ0TlwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAyLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiAyNTguOTQ0ODY5OTYzOTkwNjQsXG4gICAgICBcInlcIjogMjUzLjMyNjc0OTAxNTQzMjYsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMzMsXG4gICAgICBcImhlaWdodFwiOiAwLFxuICAgICAgXCJzZWVkXCI6IDg5NTc4MzU1MixcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcImxGQU9mTzFFeUwtckxtZHdPUTI1MlwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlLFxuICAgICAgXCJzdGFydEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwiZW5kQmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJsYXN0Q29tbWl0dGVkUG9pbnRcIjogbnVsbCxcbiAgICAgIFwic3RhcnRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwiZW5kQXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIDEzMyxcbiAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImxpbmVcIixcbiAgICAgIFwidmVyc2lvblwiOiA1MDYsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiAxNDIzNzY2MTQ0LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiVUk3M09rTlVpTjFMcVdZRWNMSTVmXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDIsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiA0LjcxMjM4ODk4MDM4NDY5MSxcbiAgICAgIFwieFwiOiAzMjguMDAxMzMxMzQzMDkwOSxcbiAgICAgIFwieVwiOiAxODQuMjM0NjY0Mzk5ODcxOTIsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMzMsXG4gICAgICBcImhlaWdodFwiOiAwLFxuICAgICAgXCJzZWVkXCI6IDE4ODIwNzk4NzIsXG4gICAgICBcImdyb3VwSWRzXCI6IFtcbiAgICAgICAgXCJsRkFPZk8xRXlMLXJMbWR3T1EyNTJcIlxuICAgICAgXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogMlxuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzM4ODc5LFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwic3RhcnRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImVuZEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwibGFzdENvbW1pdHRlZFBvaW50XCI6IG51bGwsXG4gICAgICBcInN0YXJ0QXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcImVuZEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJwb2ludHNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAxMzMsXG4gICAgICAgICAgMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJsaW5lXCIsXG4gICAgICBcInZlcnNpb25cIjogNDM2LFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMTEwMDY1MzE4NCxcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcIjZtSnA5U3pHLWFLYWJRT1RibnA5WVwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAyLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMS41NzA3OTYzMjY3OTQ4OTY2LFxuICAgICAgXCJ4XCI6IDQyNi4yMjI5NTE3NDg4MDg1NSxcbiAgICAgIFwieVwiOiAxODMuNDUyNTIwNzgzNDU2NTIsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMzMsXG4gICAgICBcImhlaWdodFwiOiAwLFxuICAgICAgXCJzZWVkXCI6IDEwNDk4NTIxNixcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcInhjY2E1c1ZmdnA5OVl3TlVSOU1iNVwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlLFxuICAgICAgXCJzdGFydEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwiZW5kQmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJsYXN0Q29tbWl0dGVkUG9pbnRcIjogbnVsbCxcbiAgICAgIFwic3RhcnRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwiZW5kQXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIDEzMyxcbiAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImxpbmVcIixcbiAgICAgIFwidmVyc2lvblwiOiA1NjEsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiA3MjM2Njk2MzIsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJsaThVVE9OZTZ1S0QzVW5GN3RwUWlcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMixcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDAsXG4gICAgICBcInhcIjogNDk2LjE3NjUyNjUxMTYwMTksXG4gICAgICBcInlcIjogMjUxLjg3ODU2ODE2NTYyNDk4LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgIFwid2lkdGhcIjogMTMzLFxuICAgICAgXCJoZWlnaHRcIjogMCxcbiAgICAgIFwic2VlZFwiOiAyMTIwMTk2NzM2LFxuICAgICAgXCJncm91cElkc1wiOiBbXG4gICAgICAgIFwieGNjYTVzVmZ2cDk5WXdOVVI5TWI1XCJcbiAgICAgIF0sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgMTMzLFxuICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwibGluZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDM2MixcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDE3NDgyMzg5NzYsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJGVUFyZmhNekpiYl9rRnRTU1lDeFBcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwiY3Jvc3MtaGF0Y2hcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMSxcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJkYXNoZWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiAwLFxuICAgICAgXCJ4XCI6IDQ5NS43MTQ2MjM2MTAzMDM1MyxcbiAgICAgIFwieVwiOiAzMDEuMzQzMDcxMjY2MjQyNTMsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJncmVlblwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMzcuMTQxODAwMzM3MjI4NTcsXG4gICAgICBcImhlaWdodFwiOiAxLjAwODM5NTU5MDcxNDk0MDIsXG4gICAgICBcInNlZWRcIjogMTIyMTE0Njg4LFxuICAgICAgXCJncm91cElkc1wiOiBbXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogMlxuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzM4ODc5LFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwic3RhcnRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImVuZEJpbmRpbmdcIjogbnVsbCxcbiAgICAgIFwibGFzdENvbW1pdHRlZFBvaW50XCI6IG51bGwsXG4gICAgICBcInN0YXJ0QXJyb3doZWFkXCI6IG51bGwsXG4gICAgICBcImVuZEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJwb2ludHNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAxMzcuMTQxODAwMzM3MjI4NTcsXG4gICAgICAgICAgMS4wMDgzOTU1OTA3MTQ5NDAyXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImxpbmVcIixcbiAgICAgIFwidmVyc2lvblwiOiA0NjUsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiAyMDA1OTA2MDQ4LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiYmR6N2E4dEtUWF8yaThjZ2lLcUZnXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcImNyb3NzLWhhdGNoXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDEsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwiZGFzaGVkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMS41NzA3OTYzMjY3OTQ4OTU3LFxuICAgICAgXCJ4XCI6IDM3NS40NDk4ODYxMDYzNjMsXG4gICAgICBcInlcIjogNDIxLjQ4Mzc0MTQ0MzA3ODEsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJncmVlblwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMzcuMTQxODAwMzM3MjI4NTcsXG4gICAgICBcImhlaWdodFwiOiAxLjAwODM5NTU5MDcxNDk0MDIsXG4gICAgICBcInNlZWRcIjogMjAwODYxMzUwNCxcbiAgICAgIFwiZ3JvdXBJZHNcIjogW10sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgMTM3LjE0MTgwMDMzNzIyODU3LFxuICAgICAgICAgIDEuMDA4Mzk1NTkwNzE0OTQwMlxuICAgICAgICBdXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJyZWN0YW5nbGVcIixcbiAgICAgIFwidmVyc2lvblwiOiA1MjQsXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiAyMTQ2Nzg3OTY4LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiYkIya2hlaVdZQ3dNVEV5cG1GY2F3XCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDIsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiAwLFxuICAgICAgXCJ4XCI6IDQxMi4yNTY1MTc1MzU0MzM5LFxuICAgICAgXCJ5XCI6IDM0OC42NjE1OTA0MzE1MzYzLFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgXCJ3aWR0aFwiOiA2My45NzQzMTUwMzA0MjU0OTQsXG4gICAgICBcImhlaWdodFwiOiAyMS43NTEyNjcxMTAzNDQ2NjcsXG4gICAgICBcInNlZWRcIjogMTMxNjI3MDcyMCxcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcInM5SHZ4RDAtcGdJTF9DaWo2el9JVlwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAzXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJlbGxpcHNlXCIsXG4gICAgICBcInZlcnNpb25cIjogNTMwLFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMTM0NDYwNjg0OCxcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcInM1Z2RlUFRad05vR1k0ZVRtNmxLX1wiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAxLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiA0MTguMDg5Mzg1MDU0MDkzMyxcbiAgICAgIFwieVwiOiAzNTIuOTA2NjEyMjI3NzE0OTYsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJyZWRcIixcbiAgICAgIFwid2lkdGhcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJoZWlnaHRcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJzZWVkXCI6IDg0MjY4NzEwNCxcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcInM5SHZ4RDAtcGdJTF9DaWo2el9JVlwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJlbGxpcHNlXCIsXG4gICAgICBcInZlcnNpb25cIjogNTQ4LFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMTU5MTY1NzA4OCxcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcInczTUdkLUNvY3pFSnZzRlhMenlPNVwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJjcm9zcy1oYXRjaFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAxLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiA0MzcuOTIxNDIyNzEzNTI1MyxcbiAgICAgIFwieVwiOiAzNTIuOTA2NjEyMjI3NzE0OTYsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJ5ZWxsb3dcIixcbiAgICAgIFwid2lkdGhcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJoZWlnaHRcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJzZWVkXCI6IDE5MDkwNjg0MTYsXG4gICAgICBcImdyb3VwSWRzXCI6IFtcbiAgICAgICAgXCJzOUh2eEQwLXBnSUxfQ2lqNnpfSVZcIlxuICAgICAgXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogMlxuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzM4ODc5LFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwiZWxsaXBzZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDU2NixcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDEyNTYzNTQ0MzIsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJ2bmtERXVoY29tQTgtZ2llem9SbmtcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwiY3Jvc3MtaGF0Y2hcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMSxcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDAsXG4gICAgICBcInhcIjogNDU3Ljc1MzQ2MDM3Mjk1NzMsXG4gICAgICBcInlcIjogMzUyLjkwNjYxMjIyNzcxNDk2LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiZ3JlZW5cIixcbiAgICAgIFwid2lkdGhcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJoZWlnaHRcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJzZWVkXCI6IDY1MjU4MTEyLFxuICAgICAgXCJncm91cElkc1wiOiBbXG4gICAgICAgIFwiczlIdnhEMC1wZ0lMX0NpajZ6X0lWXCJcbiAgICAgIF0sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcInJlY3RhbmdsZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDYyNyxcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDE1MjU2ODY5MTIsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJoNENlR0NLV09FOGdCSm5qQ3RrbHFcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMixcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDAsXG4gICAgICBcInhcIjogNDg2LjU3NjIyNDQxNTc3NjgsXG4gICAgICBcInlcIjogMjY5LjczOTM2MDg4NDE2MTY3LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgXCJ3aWR0aFwiOiAyMy43MjE4NDQ2NDI2MDgyOTMsXG4gICAgICBcImhlaWdodFwiOiA2MS4xNDczMDE5NTc5OTU0OCxcbiAgICAgIFwic2VlZFwiOiAxMjIxMjI4ODAsXG4gICAgICBcImdyb3VwSWRzXCI6IFtcbiAgICAgICAgXCJMSUlJaTUzQ1JzUDZQTVBoanJoTnhcIlxuICAgICAgXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogM1xuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzM4ODc5LFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwiZWxsaXBzZVwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDU3MyxcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDIxMTAyNDc1NTIsXG4gICAgICBcImlzRGVsZXRlZFwiOiBmYWxzZSxcbiAgICAgIFwiaWRcIjogXCJRTmJrOGItMXJ6eVV6Zk9McW1lRlBcIixcbiAgICAgIFwiZmlsbFN0eWxlXCI6IFwiY3Jvc3MtaGF0Y2hcIixcbiAgICAgIFwic3Ryb2tlV2lkdGhcIjogMSxcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDAsXG4gICAgICBcInhcIjogNDkxLjYxOTY2NjUxMjA3MzMsXG4gICAgICBcInlcIjogMjczLjk4NDM4MjY4MDM0MDMzLFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwicmVkXCIsXG4gICAgICBcIndpZHRoXCI6IDEzLjQzNDYwNjE1NjM4OTM1MixcbiAgICAgIFwiaGVpZ2h0XCI6IDEzLjQzNDYwNjE1NjM4OTM1MixcbiAgICAgIFwic2VlZFwiOiAxMTE5MTY3MTA0LFxuICAgICAgXCJncm91cElkc1wiOiBbXG4gICAgICAgIFwiTElJSWk1M0NSc1A2UE1QaGpyaE54XCJcbiAgICAgIF0sXG4gICAgICBcImZyYW1lSWRcIjogbnVsbCxcbiAgICAgIFwicm91bmRuZXNzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IDJcbiAgICAgIH0sXG4gICAgICBcImJvdW5kRWxlbWVudHNcIjogW10sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImVsbGlwc2VcIixcbiAgICAgIFwidmVyc2lvblwiOiA1OTksXG4gICAgICBcInZlcnNpb25Ob25jZVwiOiAxMjQ0MjM0MzY4LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiSzg5cmxOZC12dkRyODBjQ0RSSlA2XCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcImNyb3NzLWhhdGNoXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDEsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwicm91Z2huZXNzXCI6IDEsXG4gICAgICBcIm9wYWNpdHlcIjogMTAwLFxuICAgICAgXCJhbmdsZVwiOiAwLFxuICAgICAgXCJ4XCI6IDQ5MS42MTk2NjY1MTIwNzMzLFxuICAgICAgXCJ5XCI6IDI5My4yNTQxODIzMzQwODMsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJ5ZWxsb3dcIixcbiAgICAgIFwid2lkdGhcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJoZWlnaHRcIjogMTMuNDM0NjA2MTU2Mzg5MzUyLFxuICAgICAgXCJzZWVkXCI6IDYxOTUwMDE2MCxcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcIkxJSUlpNTNDUnNQNlBNUGhqcmhOeFwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJlbGxpcHNlXCIsXG4gICAgICBcInZlcnNpb25cIjogNjIzLFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMjEyNzkwMTMxMixcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcIkQtV2xhSkRzVFpwSDBxaXVsN25ORlwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAxLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiA0OTEuNjE5NjY2NTEyMDczMyxcbiAgICAgIFwieVwiOiAzMTIuNTIzOTgxOTg3ODI0NzUsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCJncmVlblwiLFxuICAgICAgXCJ3aWR0aFwiOiAxMy40MzQ2MDYxNTYzODkzNTIsXG4gICAgICBcImhlaWdodFwiOiAxMy40MzQ2MDYxNTYzODkzNTIsXG4gICAgICBcInNlZWRcIjogMTE1MjI4NzM2MCxcbiAgICAgIFwiZ3JvdXBJZHNcIjogW1xuICAgICAgICBcIkxJSUlpNTNDUnNQNlBNUGhqcmhOeFwiXG4gICAgICBdLFxuICAgICAgXCJmcmFtZUlkXCI6IG51bGwsXG4gICAgICBcInJvdW5kbmVzc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiAyXG4gICAgICB9LFxuICAgICAgXCJib3VuZEVsZW1lbnRzXCI6IFtdLFxuICAgICAgXCJ1cGRhdGVkXCI6IDE3MzcwMTkzMzg4NzksXG4gICAgICBcImxpbmtcIjogbnVsbCxcbiAgICAgIFwibG9ja2VkXCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJhcnJvd1wiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDMyMyxcbiAgICAgIFwidmVyc2lvbk5vbmNlXCI6IDQyNjU2Mzg0LFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiNU43Wm9oYkVXbHM5VFFDTDJweVVjXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcImNyb3NzLWhhdGNoXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDEsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwiZGFzaGVkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiA0NDQuMzA3NjU1OTY2NjYyNCxcbiAgICAgIFwieVwiOiAxMTYuODgyNzg0NjAyODAwMDMsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgICBcIndpZHRoXCI6IDUuNjg0MzQxODg2MDgwODAyZS0xNCxcbiAgICAgIFwiaGVpZ2h0XCI6IDEzNC4xOTAzNzk0NzA4MjA4NixcbiAgICAgIFwic2VlZFwiOiAxNjIyODE1MzYwLFxuICAgICAgXCJncm91cElkc1wiOiBbXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogMlxuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgXCJpZFwiOiBcIld1WjlreFVDZ1kyM0s5eWdlS0NaU1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgLTUuNjg0MzQxODg2MDgwODAyZS0xNCxcbiAgICAgICAgICAxMzQuMTkwMzc5NDcwODIwODZcbiAgICAgICAgXVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDIxLFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogOTkyNDE3MTUyLFxuICAgICAgXCJpc0RlbGV0ZWRcIjogZmFsc2UsXG4gICAgICBcImlkXCI6IFwiV3VaOWt4VUNnWTIzSzl5Z2VLQ1pTXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcImNyb3NzLWhhdGNoXCIsXG4gICAgICBcInN0cm9rZVdpZHRoXCI6IDEsXG4gICAgICBcInN0cm9rZVN0eWxlXCI6IFwiZGFzaGVkXCIsXG4gICAgICBcInJvdWdobmVzc1wiOiAxLFxuICAgICAgXCJvcGFjaXR5XCI6IDEwMCxcbiAgICAgIFwiYW5nbGVcIjogMCxcbiAgICAgIFwieFwiOiA0MzEuNzg3NjU1NTA4ODk4NzUsXG4gICAgICBcInlcIjogMTcxLjQ3Nzk3NDMzODIxMDQ2LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgXCJ3aWR0aFwiOiAyNS4wNDAwMDA5MTU1MjczNDQsXG4gICAgICBcImhlaWdodFwiOiAyNSxcbiAgICAgIFwic2VlZFwiOiAxNjA3NDU5NDU2LFxuICAgICAgXCJncm91cElkc1wiOiBbXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjogbnVsbCxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzQ0NjExLFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwiZm9udFNpemVcIjogMjAsXG4gICAgICBcImZvbnRGYW1pbHlcIjogMSxcbiAgICAgIFwidGV4dFwiOiBcIk5TXCIsXG4gICAgICBcInRleHRBbGlnblwiOiBcImNlbnRlclwiLFxuICAgICAgXCJ2ZXJ0aWNhbEFsaWduXCI6IFwibWlkZGxlXCIsXG4gICAgICBcImNvbnRhaW5lcklkXCI6IFwiNU43Wm9oYkVXbHM5VFFDTDJweVVjXCIsXG4gICAgICBcIm9yaWdpbmFsVGV4dFwiOiBcIk5TXCIsXG4gICAgICBcImxpbmVIZWlnaHRcIjogMS4yNSxcbiAgICAgIFwiYmFzZWxpbmVcIjogMThcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImFycm93XCIsXG4gICAgICBcInZlcnNpb25cIjogMzUzLFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMTY3ODQxNDQ2NCxcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcInF1cWs0NC1BbUJmYXpCX0dkNHV2LVwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJjcm9zcy1oYXRjaFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAxLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcImRhc2hlZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDQuNzEyMzg4OTgwMzg0NjksXG4gICAgICBcInhcIjogMzI3LjQ5Nzk1ODI2NzY5MTUsXG4gICAgICBcInlcIjogMjM0LjE3NTI5MzI0MDkyMjIsXG4gICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzFlMWUxZVwiLFxuICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgICBcIndpZHRoXCI6IDUuNjg0MzQxODg2MDgwODAyZS0xNCxcbiAgICAgIFwiaGVpZ2h0XCI6IDEzNC4xOTAzNzk0NzA4MjA4NixcbiAgICAgIFwic2VlZFwiOiAxMzUzNjgzNTg0LFxuICAgICAgXCJncm91cElkc1wiOiBbXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjoge1xuICAgICAgICBcInR5cGVcIjogMlxuICAgICAgfSxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgXCJpZFwiOiBcIjVIUWF5TWhQeWN1RUtDb3RLUGxzZFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInVwZGF0ZWRcIjogMTczNzAxOTMzODg3OSxcbiAgICAgIFwibGlua1wiOiBudWxsLFxuICAgICAgXCJsb2NrZWRcIjogZmFsc2UsXG4gICAgICBcInN0YXJ0QmluZGluZ1wiOiBudWxsLFxuICAgICAgXCJlbmRCaW5kaW5nXCI6IG51bGwsXG4gICAgICBcImxhc3RDb21taXR0ZWRQb2ludFwiOiBudWxsLFxuICAgICAgXCJzdGFydEFycm93aGVhZFwiOiBudWxsLFxuICAgICAgXCJlbmRBcnJvd2hlYWRcIjogbnVsbCxcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgLTUuNjg0MzQxODg2MDgwODAyZS0xNCxcbiAgICAgICAgICAxMzQuMTkwMzc5NDcwODIwODZcbiAgICAgICAgXVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgXCJ2ZXJzaW9uXCI6IDIzLFxuICAgICAgXCJ2ZXJzaW9uTm9uY2VcIjogMTA4NDc3Nzg1NixcbiAgICAgIFwiaXNEZWxldGVkXCI6IGZhbHNlLFxuICAgICAgXCJpZFwiOiBcIjVIUWF5TWhQeWN1RUtDb3RLUGxzZFwiLFxuICAgICAgXCJmaWxsU3R5bGVcIjogXCJjcm9zcy1oYXRjaFwiLFxuICAgICAgXCJzdHJva2VXaWR0aFwiOiAxLFxuICAgICAgXCJzdHJva2VTdHlsZVwiOiBcImRhc2hlZFwiLFxuICAgICAgXCJyb3VnaG5lc3NcIjogMSxcbiAgICAgIFwib3BhY2l0eVwiOiAxMDAsXG4gICAgICBcImFuZ2xlXCI6IDQuNzEyMzg4OTgwMzg0NjksXG4gICAgICBcInhcIjogMzEzLjUxMjQ4NjU0MzA0NzIsXG4gICAgICBcInlcIjogMjg3Ljg2NjQyNTc2MDUwODA0LFxuICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMxZTFlMWVcIixcbiAgICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgXCJ3aWR0aFwiOiAyOC4zOTk5OTk2MTg1MzAyNzMsXG4gICAgICBcImhlaWdodFwiOiAyNSxcbiAgICAgIFwic2VlZFwiOiAxNzgwMDQwMzIwLFxuICAgICAgXCJncm91cElkc1wiOiBbXSxcbiAgICAgIFwiZnJhbWVJZFwiOiBudWxsLFxuICAgICAgXCJyb3VuZG5lc3NcIjogbnVsbCxcbiAgICAgIFwiYm91bmRFbGVtZW50c1wiOiBbXSxcbiAgICAgIFwidXBkYXRlZFwiOiAxNzM3MDE5MzQ0NjExLFxuICAgICAgXCJsaW5rXCI6IG51bGwsXG4gICAgICBcImxvY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwiZm9udFNpemVcIjogMjAsXG4gICAgICBcImZvbnRGYW1pbHlcIjogMSxcbiAgICAgIFwidGV4dFwiOiBcIkVXXCIsXG4gICAgICBcInRleHRBbGlnblwiOiBcImNlbnRlclwiLFxuICAgICAgXCJ2ZXJ0aWNhbEFsaWduXCI6IFwibWlkZGxlXCIsXG4gICAgICBcImNvbnRhaW5lcklkXCI6IFwicXVxazQ0LUFtQmZhekJfR2Q0dXYtXCIsXG4gICAgICBcIm9yaWdpbmFsVGV4dFwiOiBcIkVXXCIsXG4gICAgICBcImxpbmVIZWlnaHRcIjogMS4yNSxcbiAgICAgIFwiYmFzZWxpbmVcIjogMThcbiAgICB9XG4gIF0sXG4gIFwiYXBwU3RhdGVcIjoge1xuICAgIFwiZ3JpZFNpemVcIjogbnVsbCxcbiAgICBcInZpZXdCYWNrZ3JvdW5kQ29sb3JcIjogXCIjZmZmZmZmXCJcbiAgfSxcbiAgXCJmaWxlc1wiOiB7fVxufSIsIm9wdGlvbnMiOnsic2Nyb2xsX3RvX2NvbnRlbnQiOnRydWUsInZpZXdfbW9kZV9lbmFibGVkIjp0cnVlLCJ6ZW5fbW9kZV9lbmFibGVkIjp0cnVlfSwidmFyaWFibGUiOiJleGNhbGlkcmF3In0","chunks":null,"kind":"Elixir.KinoExcalidraw.SmartCell","livebook_object":"smart_cell"} -->

```elixir
Kino.nothing()
```

<!-- livebook:{"attrs":"","chunks":null,"kind":"Elixir.KinoExcalidraw.SmartCell","livebook_object":"smart_cell"} -->

```elixir
Kino.nothing()
```

```elixir
defmodule TrafficLight do
  alias ColouredFlow.Definition.ColouredPetriNet
  alias ColouredFlow.Definition.Place
  alias ColouredFlow.Definition.Variable
  alias ColouredFlow.Enactment.Marking

  import ColouredFlow.Builder.DefinitionHelper
  import ColouredFlow.Notation.Colset

  import Record, only: [is_record: 2]

  @flow %ColouredPetriNet{
    colour_sets: [
      colset(unit() :: {})
    ],
    places:
      Enum.map(
        ~w[red_ew green_ew yellow_ew red_ns green_ns yellow_ns safe_ew safe_ns],
        fn name ->
          %Place{name: name, colour_set: :unit}
        end
      ),
    transitions:
      Enum.map(
        ~w[turn_red_ew turn_green_ew turn_yellow_ew turn_red_ns turn_green_ns turn_yellow_ns],
        &build_transition!(name: &1)
      ),
    arcs:
      [
        arc(turn_green_ew <~ red_ew :: "bind {1, u}"),
        arc(turn_green_ew ~> green_ew :: "{1, u}"),
        arc(turn_yellow_ew <~ green_ew :: "bind {1, u}"),
        arc(turn_yellow_ew ~> yellow_ew :: "{1, u}"),
        arc(turn_red_ew <~ yellow_ew :: "bind {1, u}"),
        arc(turn_red_ew ~> red_ew :: "{1, u}")
      ] ++
        [
          arc(turn_green_ns <~ red_ns :: "bind {1, u}"),
          arc(turn_green_ns ~> green_ns :: "{1, u}"),
          arc(turn_yellow_ns <~ green_ns :: "bind {1, u}"),
          arc(turn_yellow_ns ~> yellow_ns :: "{1, u}"),
          arc(turn_red_ns <~ yellow_ns :: "bind {1, u}"),
          arc(turn_red_ns ~> red_ns :: "{1, u}")
        ] ++
        [
          arc(turn_red_ns ~> safe_ew :: "{1, u}"),
          arc(turn_green_ew <~ safe_ew :: "bind {1, u}"),
          arc(turn_red_ew ~> safe_ns :: "{1, u}"),
          arc(turn_green_ns <~ safe_ns :: "bind {1, u}")
        ],
    variables: [
      %Variable{name: :u, colour_set: :unit}
    ]
  }

  def to_mermaid do
    @flow
    |> ColouredFlow.Definition.Presentation.to_mermaid()
    |> Kino.Mermaid.new()
  end

  def insert_flow do
    ColouredFlow.Runner.Storage.InMemory.insert_flow!(@flow)
  end

  def insert_enactment(flow) when is_record(flow, :flow) do
    import ColouredFlow.MultiSet, only: :sigils

    ColouredFlow.Runner.Storage.InMemory.insert_enactment!(flow, [
      %Marking{place: "red_ew", tokens: ~MS[{}]},
      %Marking{place: "red_ns", tokens: ~MS[{}]},
      %Marking{place: "safe_ew", tokens: ~MS[{}]}
    ])
  end

  def to_kino do
    lights =
      for color <- [:red, :yellow, :green], dir <- [:ew, :ns] do
        {"#{color}_#{dir}", Kino.Frame.new(placeholder: false)}
      end

    grid = Kino.Layout.grid([EW, NS] ++ Keyword.values(lights), columns: 2)

    {grid, lights}
  end
end
```

## Prepare the storage and supervisor

```elixir
storage_pid = Kino.start_child!(ColouredFlow.Runner.Storage.InMemory)

Kino.inspect("Storage started: #{inspect(storage_pid)}")

supervisor_pid = Kino.start_child!(ColouredFlow.Runner.Supervisor)

Kino.inspect("Runner supervisor started: #{inspect(supervisor_pid)}")

:ok
```

## Workitem handler

```elixir
defmodule TrafficLight.WorkitemPubSub do
  use GenServer

  alias ColouredFlow.Runner.Enactment.Workitem

  def handle_event(
        [:coloured_flow, :runner, :enactment, _transition],
        _measurements,
        %{enactment_id: enactment_id} = metadata,
        %{enactment_id: enactment_id} = options
      ) do
    publish_tick(metadata.enactment_state, options.lights)
  end

  def handle_event(
        [:coloured_flow, :runner, :enactment, _operation, :stop],
        measurements,
        %{enactment_id: enactment_id} = metadata,
        %{enactment_id: enactment_id} = options
      ) do
    Enum.each(metadata.workitems, fn workitem ->
      light = get_light(workitem, options.lights)
      time = measurements |> Map.fetch!(:system_time) |> DateTime.from_unix!(:native)

      Process.send(light, {:workitem, workitem, time}, [])
    end)

    publish_tick(metadata.enactment_state, options.lights)
  end

  def handle_event(
        [:coloured_flow, :runner, :enactment, _operation, _event],
        _measurements,
        %{enactment_id: enactment_id} = metadata,
        %{enactment_id: enactment_id} = options
      ) do
    publish_tick(metadata.enactment_state, options.lights)
  end

  def handle_event(_event_name, _measurements, _metadata, _options) do
    # ignore events from other enactments
    :ok
  end

  defp publish_tick(enactment_state, lights) do
    lights
    |> Map.values()
    |> Enum.each(fn light ->
      Process.send(light, {:tick, enactment_state}, [])
    end)
  end

  def start_link(init_arg) do
    GenServer.start_link(__MODULE__, init_arg, name: __MODULE__)
  end

  @impl GenServer
  def init(init_arg) do
    enactment_id = Keyword.fetch!(init_arg, :enactment_id)
    ew_pid = Keyword.fetch!(init_arg, :ew_pid)
    ns_pid = Keyword.fetch!(init_arg, :ns_pid)

    lights = %{"ew" => ew_pid, "ns" => ns_pid}
    state = %{enactment_id: enactment_id, lights: lights}

    ColouredFlow.Runner.Telemetry.detach(__MODULE__)
    :ok = ColouredFlow.Runner.Telemetry.attach(__MODULE__, &__MODULE__.handle_event/4, state)

    {:ok, state}
  end

  defp get_light(%Workitem{} = workitem, lights) do
    dir =
      case workitem.binding_element.transition do
        "turn_red_" <> dir -> dir
        "turn_yellow_" <> dir -> dir
        "turn_green_" <> dir -> dir
      end

    Map.fetch!(lights, dir)
  end
end
```

```elixir
defmodule TrafficLight.DirectionalLight do
  use GenServer

  alias ColouredFlow.Runner.Enactment.WorkitemTransition
  alias ColouredFlow.Runner.Enactment.Workitem

  def start_link(init_arg) when is_list(init_arg) do
    {name, init_arg} = Keyword.pop!(init_arg, :name)

    GenServer.start_link(__MODULE__, init_arg, name: name)
  end

  @impl GenServer
  def init(init_arg) do
    enactment_id = Keyword.fetch!(init_arg, :enactment_id)
    direction = Keyword.fetch!(init_arg, :direction)
    lights = Keyword.fetch!(init_arg, :lights)

    {
      :ok,
      %{
        enactment_id: enactment_id,
        direction: direction,
        lights: lights
      }
    }
  end

  @impl GenServer
  def handle_info({:workitem, %Workitem{state: :enabled} = workitem, inserted_at}, state) do
    started_workitem = start_workitem(state.enactment_id, workitem.id)

    schedule_turn(started_workitem, inserted_at)

    {:noreply, state}
  end

  def handle_info({:workitem, %Workitem{}, _time}, state) do
    # ignore other workitems

    {:noreply, state}
  end

  def handle_info({:turn, %Workitem{} = workitem}, state) do
    {:ok, _completed_workitem} =
      WorkitemTransition.complete_workitem(state.enactment_id, {workitem.id, []})

    {:noreply, state}
  end

  def handle_info({:tick, enactment_state}, state) do
    direction = Atom.to_string(state.direction)

    marking_places =
      enactment_state
      |> Map.get(:markings)
      |> Map.keys()
      |> Enum.filter(&String.ends_with?(&1, direction))

    control(marking_places, state.lights)

    {:noreply, state}
  end

  defp start_workitem(enactment_id, workitem_id) do
    {:ok, started_workitem} =
      WorkitemTransition.start_workitem(enactment_id, workitem_id)

    started_workitem
  end

  @color_delay %{
    red: 3_000,
    yellow: 10_000,
    green: 0
  }

  defp schedule_turn(%Workitem{} = workitem, started_at) do
    color = get_color(workitem)
    delay = Map.fetch!(@color_delay, color)

    deplay =
      NaiveDateTime.utc_now()
      |> NaiveDateTime.diff(started_at, :millisecond)
      |> then(&Kernel.-(delay, &1))
      |> Kernel.max(0)

    Process.send_after(self(), {:turn, workitem}, deplay)
  end

  defp get_color(%Workitem{} = workitem) do
    case workitem.binding_element.transition do
      "turn_red" <> _dir -> :red
      "turn_yellow" <> _dir -> :yellow
      "turn_green" <> _dir -> :green
    end
  end

  defp control(marking_places, lights) do
    Enum.each(lights, fn {place_name, frame} ->
      light_symbol = light_symbol(place_name, place_name in marking_places)

      Kino.Frame.render(frame, light_symbol)
    end)
  end

  defp light_symbol(color, on?)

  defp light_symbol(color, true) do
    emoji =
      case color do
        "red" <> _dir -> "🔴"
        "yellow" <> _dir -> "🟡"
        "green" <> _dir -> "🟢"
      end

    Kino.Text.new(emoji, terminal: true)
  end

  defp light_symbol(_color, false) do
    Kino.Text.new("⚫️", terminal: true)
  end
end
```

## Run

```elixir
import ColouredFlow.Runner.Storage.InMemory, only: :macros

flow = TrafficLight.insert_flow()
enactment = TrafficLight.insert_enactment(flow)

{grid, lights} = TrafficLight.to_kino()

enactment_id = enactment(enactment, :id)

groups =
  Enum.group_by(lights, fn {name, _frame} ->
    cond do
      String.ends_with?(name, "ew") -> :ew
      String.ends_with?(name, "ns") -> :ns
      true -> raise "Unknown light #{inspect(name)}"
    end
  end)

light_options = [enactment_id: enactment_id]

ew_pid =
  Kino.start_child!({
    TrafficLight.DirectionalLight,
    [
      name: TrafficLight.EWLight,
      enactment_id: enactment_id,
      direction: :ew,
      lights: groups.ew
    ]
  })

ns_pid =
  Kino.start_child!({
    TrafficLight.DirectionalLight,
    [
      name: TrafficLight.NSLight,
      enactment_id: enactment_id,
      direction: :ns,
      lights: groups.ns
    ]
  })

Kino.start_child!({
  TrafficLight.WorkitemPubSub,
  [
    enactment_id: enactment_id,
    ew_pid: ew_pid,
    ns_pid: ns_pid
  ]
})

{:ok, enactment_pid} =
  ColouredFlow.Runner.Enactment.Supervisor.start_enactment(enactment_id)

Kino.inspect("Enactment is running: #{inspect(enactment_pid)}")

grid
```
